"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var promiseWhile = function promiseWhile(condition, execute) {
  return new Promise(function (resolve, reject) {
    var iterate = function iterate() {
      if (condition()) {
        return execute().then(iterate).catch(reject);
      }

      return resolve();
    };

    return iterate();
  });
};

var _default = function _default(url, options, apiService, request) {
  return new Promise(function (accept, reject) {
    if (!url) {
      reject(new Error('No url provided for scrollAll'));
    }

    options = Object.assign({}, {
      interval: 200
    }, options);
    var results = [],
        xNextPage,
        xCount,
        maxPages = 2,
        currentPage = 1,
        first = true;
    promiseWhile(function () {
      if (!first) {
        if (results.length >= xCount) {
          return false;
        }

        if (maxPages <= currentPage) {
          return false;
        }

        currentPage += 1;
      }

      return true;
    }, function () {
      return new Promise(function (accept2, reject2) {
        request("".concat(apiService.url).concat(xNextPage || url), apiService).then(function (response) {
          if (first) {
            first = false;
            xNextPage = response.headers['x-next-page'];
            xCount = parseInt(response.headers['x-count'], 10);
            maxPages = Math.round(xCount / response.body.length);

            if (options.pageLimit && options.pageLimit < maxPages) {
              maxPages = options.pageLimit;
            }
          }

          if (response.body && !response.body.length) {
            return accept2();
          }

          results = results.concat(response.body);
          setTimeout(function () {
            return accept2();
          }, options.interval);
        }).catch(reject2);
      });
    }).then(function () {
      accept(results);
    }).catch(reject);
  });
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2pzL3Njcm9sbC1hbGwuanMiXSwibmFtZXMiOlsicHJvbWlzZVdoaWxlIiwiY29uZGl0aW9uIiwiZXhlY3V0ZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiaXRlcmF0ZSIsInRoZW4iLCJjYXRjaCIsInVybCIsIm9wdGlvbnMiLCJhcGlTZXJ2aWNlIiwicmVxdWVzdCIsImFjY2VwdCIsIkVycm9yIiwiT2JqZWN0IiwiYXNzaWduIiwiaW50ZXJ2YWwiLCJyZXN1bHRzIiwieE5leHRQYWdlIiwieENvdW50IiwibWF4UGFnZXMiLCJjdXJyZW50UGFnZSIsImZpcnN0IiwibGVuZ3RoIiwiYWNjZXB0MiIsInJlamVjdDIiLCJyZXNwb25zZSIsImhlYWRlcnMiLCJwYXJzZUludCIsIk1hdGgiLCJyb3VuZCIsImJvZHkiLCJwYWdlTGltaXQiLCJjb25jYXQiLCJzZXRUaW1lb3V0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBTUEsZUFBZSxTQUFmQSxZQUFlLENBQUNDLFNBQUQsRUFBWUMsT0FBWjtBQUFBLFNBQXdCLElBQUlDLE9BQUosQ0FBWSxVQUFDQyxPQUFELEVBQVVDLE1BQVYsRUFBcUI7QUFDMUUsUUFBTUMsVUFBVSxTQUFWQSxPQUFVLEdBQU07QUFDbEIsVUFBSUwsV0FBSixFQUFpQjtBQUNiLGVBQU9DLFVBQ0ZLLElBREUsQ0FDR0QsT0FESCxFQUVGRSxLQUZFLENBRUlILE1BRkosQ0FBUDtBQUdIOztBQUNELGFBQU9ELFNBQVA7QUFDSCxLQVBEOztBQVNBLFdBQU9FLFNBQVA7QUFDSCxHQVg0QyxDQUF4QjtBQUFBLENBQXJCOztlQXFCZSxrQkFBQ0csR0FBRCxFQUFNQyxPQUFOLEVBQWVDLFVBQWYsRUFBMkJDLE9BQTNCO0FBQUEsU0FBdUMsSUFBSVQsT0FBSixDQUFZLFVBQUNVLE1BQUQsRUFBU1IsTUFBVCxFQUFvQjtBQUNsRixRQUFJLENBQUNJLEdBQUwsRUFBVTtBQUNOSixhQUFPLElBQUlTLEtBQUosQ0FBVSwrQkFBVixDQUFQO0FBQ0g7O0FBRURKLGNBQVVLLE9BQU9DLE1BQVAsQ0FBYyxFQUFkLEVBQWtCO0FBQ3hCQyxnQkFBVTtBQURjLEtBQWxCLEVBRVBQLE9BRk8sQ0FBVjtBQUlBLFFBQUlRLFVBQVUsRUFBZDtBQUFBLFFBQ0lDLFNBREo7QUFBQSxRQUVJQyxNQUZKO0FBQUEsUUFHSUMsV0FBVyxDQUhmO0FBQUEsUUFJSUMsY0FBYyxDQUpsQjtBQUFBLFFBS0lDLFFBQVEsSUFMWjtBQU9BdkIsaUJBQ0ksWUFBTTtBQUNGLFVBQUksQ0FBQ3VCLEtBQUwsRUFBWTtBQUVSLFlBQUlMLFFBQVFNLE1BQVIsSUFBa0JKLE1BQXRCLEVBQThCO0FBQzFCLGlCQUFPLEtBQVA7QUFDSDs7QUFHRCxZQUFJQyxZQUFZQyxXQUFoQixFQUE2QjtBQUN6QixpQkFBTyxLQUFQO0FBQ0g7O0FBRURBLHVCQUFlLENBQWY7QUFDSDs7QUFDRCxhQUFPLElBQVA7QUFDSCxLQWhCTCxFQWlCSTtBQUFBLGFBQU0sSUFBSW5CLE9BQUosQ0FBWSxVQUFDc0IsT0FBRCxFQUFVQyxPQUFWLEVBQXNCO0FBQ3BDZCwwQkFBV0QsV0FBV0YsR0FBdEIsU0FBNEJVLGFBQWFWLEdBQXpDLEdBQWdERSxVQUFoRCxFQUNLSixJQURMLENBQ1Usb0JBQVk7QUFDZCxjQUFJZ0IsS0FBSixFQUFXO0FBQ1BBLG9CQUFRLEtBQVI7QUFDQUosd0JBQVlRLFNBQVNDLE9BQVQsQ0FBaUIsYUFBakIsQ0FBWjtBQUNBUixxQkFBU1MsU0FBU0YsU0FBU0MsT0FBVCxDQUFpQixTQUFqQixDQUFULEVBQXNDLEVBQXRDLENBQVQ7QUFDQVAsdUJBQVdTLEtBQUtDLEtBQUwsQ0FBV1gsU0FBU08sU0FBU0ssSUFBVCxDQUFjUixNQUFsQyxDQUFYOztBQUdBLGdCQUFJZCxRQUFRdUIsU0FBUixJQUFxQnZCLFFBQVF1QixTQUFSLEdBQW9CWixRQUE3QyxFQUF1RDtBQUNuREEseUJBQVdYLFFBQVF1QixTQUFuQjtBQUNIO0FBQ0o7O0FBR0QsY0FBSU4sU0FBU0ssSUFBVCxJQUFpQixDQUFDTCxTQUFTSyxJQUFULENBQWNSLE1BQXBDLEVBQTRDO0FBQ3hDLG1CQUFPQyxTQUFQO0FBQ0g7O0FBQ0RQLG9CQUFVQSxRQUFRZ0IsTUFBUixDQUFlUCxTQUFTSyxJQUF4QixDQUFWO0FBQ0FHLHFCQUFXO0FBQUEsbUJBQU1WLFNBQU47QUFBQSxXQUFYLEVBQTRCZixRQUFRTyxRQUFwQztBQUNILFNBcEJMLEVBb0JPVCxLQXBCUCxDQW9CYWtCLE9BcEJiO0FBcUJILE9BdEJLLENBQU47QUFBQSxLQWpCSixFQXdDRW5CLElBeENGLENBd0NPLFlBQU07QUFDVE0sYUFBT0ssT0FBUDtBQUNILEtBMUNELEVBMENHVixLQTFDSCxDQTBDU0gsTUExQ1Q7QUEyQ0gsR0EzRHFELENBQXZDO0FBQUEsQyIsImZpbGUiOiJzY3JvbGwtYWxsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgcHJvbWlzZVdoaWxlID0gKGNvbmRpdGlvbiwgZXhlY3V0ZSkgPT4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IGl0ZXJhdGUgPSAoKSA9PiB7XG4gICAgICAgIGlmIChjb25kaXRpb24oKSkge1xuICAgICAgICAgICAgcmV0dXJuIGV4ZWN1dGUoKVxuICAgICAgICAgICAgICAgIC50aGVuKGl0ZXJhdGUpXG4gICAgICAgICAgICAgICAgLmNhdGNoKHJlamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc29sdmUoKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGl0ZXJhdGUoKTtcbn0pO1xuXG4vKipcbiAqIFJldHJpZXZlcyBhbGwgcGFnZXMgb3IgYSBsaW1pdGVkIHNldCBhbmQgcmV0dXJucyBhIHNpbmdsZSBjb25jYXRpbmF0ZWQgb2JqZWN0LlxuICogQGFyZyB7U3RyaW5nfSB1cmwgQSBxdWVyeSB1cmxcbiAqIEBhcmcge09iamVjdH0gb3B0aW9ucyBhIHNlbGVjdGlvbiBvZiBvcHRpb25zLlxuICogQGFyZyB7T2JqZWN0fSBhcGlTZXJ2aWNlIFRoZSBBUEkgc2VydmljZSBvYmplY3QgY29udGFpbmluZyBlbmRwb2ludCBkZXRhaWxzIGFuZCBrZXlcbiAqIEBhcmcge0Z1bmN0aW9ufSByZXF1ZXN0IFRoZSBwZXJmb3JtLXJlcXVlc3QgZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtPYmplY3R9IENvbmNhdGluYXRlZCByZXN1bHRzXG4gKi9cbmV4cG9ydCBkZWZhdWx0ICh1cmwsIG9wdGlvbnMsIGFwaVNlcnZpY2UsIHJlcXVlc3QpID0+IG5ldyBQcm9taXNlKChhY2NlcHQsIHJlamVjdCkgPT4ge1xuICAgIGlmICghdXJsKSB7XG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ05vIHVybCBwcm92aWRlZCBmb3Igc2Nyb2xsQWxsJykpO1xuICAgIH1cblxuICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCB7XG4gICAgICAgIGludGVydmFsOiAyMDBcbiAgICB9LCBvcHRpb25zKTtcblxuICAgIGxldCByZXN1bHRzID0gW10sXG4gICAgICAgIHhOZXh0UGFnZSxcbiAgICAgICAgeENvdW50LFxuICAgICAgICBtYXhQYWdlcyA9IDIsXG4gICAgICAgIGN1cnJlbnRQYWdlID0gMSxcbiAgICAgICAgZmlyc3QgPSB0cnVlO1xuXG4gICAgcHJvbWlzZVdoaWxlKFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWZpcnN0KSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgb25seSBvbmUgcGFnZSBvZiByZXN1bHRzLlxuICAgICAgICAgICAgICAgIGlmIChyZXN1bHRzLmxlbmd0aCA+PSB4Q291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIElmIGFsbCBwYWdlcyBoYXZlIGJlZW4gcmV0cmlldmVkXG4gICAgICAgICAgICAgICAgaWYgKG1heFBhZ2VzIDw9IGN1cnJlbnRQYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjdXJyZW50UGFnZSArPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgICgpID0+IG5ldyBQcm9taXNlKChhY2NlcHQyLCByZWplY3QyKSA9PiB7XG4gICAgICAgICAgICByZXF1ZXN0KGAke2FwaVNlcnZpY2UudXJsfSR7eE5leHRQYWdlIHx8IHVybH1gLCBhcGlTZXJ2aWNlKVxuICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpcnN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaXJzdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgeE5leHRQYWdlID0gcmVzcG9uc2UuaGVhZGVyc1sneC1uZXh0LXBhZ2UnXTsgLy8gTm93IG9ubHkgcXVlcnkgdGhlIGN1cnNvciB1cmw7XG4gICAgICAgICAgICAgICAgICAgICAgICB4Q291bnQgPSBwYXJzZUludChyZXNwb25zZS5oZWFkZXJzWyd4LWNvdW50J10sIDEwKTsgLy8gU2V0IHRoZSB0b3RhbCByZXN1bHRzXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhQYWdlcyA9IE1hdGgucm91bmQoeENvdW50IC8gcmVzcG9uc2UuYm9keS5sZW5ndGgpOyAvLyBDb252ZXJ0IHRvdGFsIHJlc3VsdHMgdG8gdG90YWwgcGFnZXNcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIHVzZXIgd2FudHMgb25seSBhIGxpbWl0ZWQgbnVtYmVyIG9mIHBhZ2VzLCBvdmVycmlkZSB0aGUgbWF4IHBhZ2VzLlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMucGFnZUxpbWl0ICYmIG9wdGlvbnMucGFnZUxpbWl0IDwgbWF4UGFnZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhQYWdlcyA9IG9wdGlvbnMucGFnZUxpbWl0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlcmUncyBvbmx5IG9uZSBwYWdlIG9mIHJlc3VsdHMgb3Igc29tZSBvdGhlciBlcnJvclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuYm9keSAmJiAhcmVzcG9uc2UuYm9keS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhY2NlcHQyKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHMuY29uY2F0KHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IGFjY2VwdDIoKSwgb3B0aW9ucy5pbnRlcnZhbCk7XG4gICAgICAgICAgICAgICAgfSkuY2F0Y2gocmVqZWN0Mik7XG4gICAgICAgIH0pLFxuICAgICkudGhlbigoKSA9PiB7XG4gICAgICAgIGFjY2VwdChyZXN1bHRzKTtcbiAgICB9KS5jYXRjaChyZWplY3QpO1xufSk7XG4iXX0=